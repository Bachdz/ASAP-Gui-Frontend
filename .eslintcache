[{"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\index.js":"1","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\App.js":"2","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\reportWebVitals.js":"3","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js":"4","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js":"5","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\Main.js":"6","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js":"7","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js":"8","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Apps.js":"9","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js":"10","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Channels.js":"11","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Messages.js":"12","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\MessageBox.js":"13","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Connection.js":"14","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\SendReceived.js":"15"},{"size":517,"mtime":1607640335941,"results":"16","hashOfConfig":"17"},{"size":1275,"mtime":1609783052220,"results":"18","hashOfConfig":"17"},{"size":375,"mtime":1607640335942,"results":"19","hashOfConfig":"17"},{"size":541,"mtime":1607640335939,"results":"20","hashOfConfig":"17"},{"size":3365,"mtime":1609782949122,"results":"21","hashOfConfig":"17"},{"size":4959,"mtime":1609956702722,"results":"22","hashOfConfig":"17"},{"size":1055,"mtime":1610462131976,"results":"23","hashOfConfig":"17"},{"size":2545,"mtime":1607687876572,"results":"24","hashOfConfig":"17"},{"size":5343,"mtime":1610291257198,"results":"25","hashOfConfig":"17"},{"size":467,"mtime":1608215305713,"results":"26","hashOfConfig":"17"},{"size":7983,"mtime":1610291359983,"results":"27","hashOfConfig":"17"},{"size":3318,"mtime":1609437494137,"results":"28","hashOfConfig":"17"},{"size":1437,"mtime":1609434752460,"results":"29","hashOfConfig":"17"},{"size":15226,"mtime":1610673304320,"results":"30","hashOfConfig":"17"},{"size":777,"mtime":1610138451894,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1u18oea",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\index.js",[],["70","71"],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\App.js",["72"],"import React from 'react';\r\n\r\n\r\n\r\nimport { ReactComponent as Arrow } from './arrow.svg';\r\nimport Login from './components/loginscreen/Login';\r\nimport Main from './components/mainscreen/Main';\r\nimport Logo from './components/fragments/Footer';\r\nimport axios from 'axios';\r\n\r\nimport { BrowserRouter as Router, Route, Redirect, useHistory } from 'react-router-dom'\r\n\r\nimport './App.css';\r\n\r\nfunction Content() {\r\n  let history = useHistory();\r\n\r\n  const doInitializeApp = () => {\r\n    axios.get('http://localhost:8080/api/v1/asap/start').then(res => {\r\n      if (res.data === true) {\r\n        history.push('/login')\r\n      } else {\r\n        alert.push('something went wrong') //TODO\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n\r\n        <div className=\"content\">\r\n          <div id=\"box\">\r\n            <h1>Welcome to ASAP engine</h1>\r\n            <Arrow id=\"next\" onClick={doInitializeApp} />\r\n          </div>\r\n        </div>\r\n        <Logo />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/\" component={Content} />\r\n      <Route path=\"/login\" component={Login} />\r\n      <Route path=\"/main/user\" component={Main} />\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\reportWebVitals.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js",["73"],"import React, { Component } from 'react';\r\nimport Peer from './subcomponents/Peer';\r\nimport CreateUser from './subcomponents/CreateUser';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Terminal from '../fragments/Terminal';\r\n\r\n\r\n\r\nimport '../../css/loginscreen/Login.css';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nclass Login extends React.Component {\r\n    state = {\r\n        peers: [],\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n        consolelog: []\r\n    }\r\n\r\n\r\n    getLog = () => {\r\n        axios.get('http://localhost:8080/api/v1/asap/logdata')\r\n            .then(res => this.setState({ consolelog: res.data }))\r\n    }\r\n    componentDidMount() {\r\n        axios.get('http://localhost:8080/api/v1/asap/peers')\r\n            .then(res => this.setState({ peers: res.data }))\r\n        this.getLog();\r\n    }\r\n\r\n\r\n    //create User\r\n    addUser = (userName) => {\r\n        let url = 'http://localhost:8080/api/v1/asap/peer?name=' + userName;\r\n        axios.post(url)\r\n            .then(res => this.setState({ peers: [...this.state.peers, res.data] }, () => this.getLog())\r\n            )\r\n\r\n    }\r\n\r\n    //remove all users\r\n    removeAllUser = () => {\r\n        axios.delete('http://localhost:8080/api/v1/asap/peers')\r\n            .then(res => {\r\n                if (res.data === false) {\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't delete peers\", alerttype: \"error\" }, () => this.getLog());\r\n\r\n                } else if (res.data === true) {\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Deleted successfully \", alerttype: \"success\" });\r\n                    axios.get('http://localhost:8080/api/v1/asap/peers')\r\n                        .then(res => this.setState({ peers: res.data }, () => this.getLog()))\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            )\r\n\r\n\r\n\r\n    }\r\n\r\n    handleClose = (event, reason) => {\r\n        this.setState({ alertopen: !this.state.alertopen });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { alertopen, alertmsg, alerttype } = this.state;\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"background-container\">\r\n                    <div className=\"content\">\r\n                        <div className=\"login-container\">\r\n                            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={2000} onClose={this.handleClose}>\r\n                                <Alert onClose={this.handleClose} severity={alerttype}>\r\n                                    {alertmsg}\r\n                                </Alert>\r\n                            </Snackbar>\r\n                            <h1>Please choose a peer</h1>\r\n                            <Peer peers={this.state.peers} />\r\n\r\n                            <div id=\"remove-peer\">\r\n                                <CloseIcon id=\"remove\" onClick={this.removeAllUser} /> Remove all peers\r\n            </div>\r\n                            <CreateUser addUser={this.addUser} />\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <Terminal consolelog={this.state.consolelog} />\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Login;","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\Main.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Apps.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Channels.js",["74"],"import React, { Component } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport '../../../css/mainscreen/Channels.css';\r\n\r\nconst styles = theme => ({\r\n    listItemText: {\r\n        fontSize: '20px'\r\n    },\r\n    listItemTextSecondary: {\r\n        color: '#ffffff'\r\n    },\r\n    setSelected: {\r\n        \"&.Mui-selected\": {\r\n            color: \"#F1C653\",\r\n            background: \"rgb(255 255 255 / 11%)\"\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nclass Channels extends Component {\r\n\r\n    state = {\r\n        channels: [],\r\n        open: true,\r\n        openAddChannel: false,\r\n        activateAddChannel: false,\r\n        openAddChannel: false,\r\n        newChannelUrl: '',\r\n        recipients: '',\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n        selectedIndex: Number,\r\n        deselect: false,\r\n        channelSelected: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:8080/api/v1/asap/channels?peer=' + this.props.username + '&storage=' + this.props.appName)\r\n            .then(res => this.setState({ channels: res.data }))\r\n    }\r\n\r\n    doCreateChannel = () => {\r\n        let recipients = this.state.recipients.split(\",\");\r\n        let obj = {\r\n            uri: this.state.newChannelUrl,\r\n            recipients: recipients\r\n        };\r\n\r\n        let url = 'http://localhost:8080/api/v1/asap/channel?peer=' + this.props.username + '&app=' + this.props.appName;\r\n        axios.post(url, obj)\r\n            .then(res => {\r\n                res.data === null ?\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong: Couldn't create channel\", alerttype: \"error\" })\r\n                    :\r\n                    this.setState({ openAddChannel: !this.state.openAddChannel, activateAddChannel: false, newChannelUrl: '', recipients: '' })\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Channel created successfully \", alerttype: \"success\", channels: [...this.state.channels, res.data], openAddChannel: false })\r\n            })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { open, openAddChannel, activateAddChannel, alertmsg, alertopen, alerttype, selectedIndex, deselect, channelSelected } = this.state;\r\n        const { classes } = this.props;\r\n\r\n        const handleClick = (event, index) => {\r\n            this.setState({ open: !this.state.open });\r\n\r\n        };\r\n\r\n        const toggleCreateNewChannel = () => {\r\n            this.setState({ openAddChannel: !this.state.openAddChannel, activateAddChannel: false, newChannelUrl: '', recipients: '' })\r\n        }\r\n\r\n        const validateChannelUrl = (e) => {\r\n            this.setState({ newChannelUrl: e.target.value }, () => validateAddChannel())\r\n\r\n        }\r\n\r\n        const validateRecipients = (e) => {\r\n            this.setState({ recipients: e.target.value }, () => validateAddChannel())\r\n        }\r\n\r\n        const validateAddChannel = () => {\r\n            if (this.state.newChannelUrl.length > 0 && this.state.recipients.length > 0) {\r\n                this.setState({ activateAddChannel: true })\r\n            } else {\r\n                this.setState({ activateAddChannel: false })\r\n            }\r\n        }\r\n\r\n        const handleClose = (event, reason) => {\r\n            this.setState({ alertopen: !this.state.alertopen });\r\n        }\r\n\r\n        const handleListItemClick = (event, index) => {\r\n            this.setState({\r\n                selectedIndex: index,\r\n                deselect: !deselect,\r\n                channelSelected: !channelSelected\r\n\r\n            })\r\n        };\r\n\r\n        const channelOnClick = (event, index, appName, channel) => {\r\n            handleListItemClick(event, index)\r\n            this.props.showMainScreen(appName, channel, channelSelected)\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"channels-container\">\r\n                <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={2000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity={alerttype}>\r\n                        {alertmsg}\r\n                    </Alert>\r\n                </Snackbar>\r\n                <List>\r\n                    <div className=\"title\">\r\n\r\n                        < ListItem button onClick={handleClick}>\r\n                            {open ? <ExpandLess /> : <ExpandMore />}\r\n                            <ListItemText classes={{ primary: classes.listItemText }} primary=\"Channels\" className='parentList' />\r\n                        </ListItem>\r\n                        {\r\n                            openAddChannel ?\r\n                                <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={toggleCreateNewChannel} />\r\n                                :\r\n                                <AddIcon id=\"addIcon\" className=\"icon\" onClick={toggleCreateNewChannel} />\r\n\r\n                        }\r\n\r\n\r\n                    </div>\r\n                    {\r\n                        openAddChannel ?\r\n                            <div className=\"addChannel\">\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"addApp\" name=\"channelname\" className=\"input\" placeholder=\"Enter channel uri\" onChange={validateChannelUrl} />\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"recipients\" name=\"recipients\" className=\"input\" placeholder=\"Enter recipients, e.g. Alice,Bob\" onChange={validateRecipients} />\r\n\r\n                                {\r\n                                    activateAddChannel ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doCreateChannel} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n                    <div className=\"channel-list\">\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <List>\r\n\r\n                                {\r\n                                    this.state.channels.length === 0 ?\r\n\r\n                                        <p className=\"information\"> There are currently no channels avaiable</p>\r\n                                        :\r\n                                        this.state.channels.map((channel, index) => (\r\n                                            <ListItem selected={selectedIndex === index && deselect === true} className={selectedIndex === index && deselect === true ? classes.setSelected : null} onClick={(event) => { channelOnClick(event, index, this.props.appName, channel) }} button id=\"channels\" >\r\n                                                <ListItemText classes={{ secondary: classes.listItemTextSecondary }} primary={channel.uri} secondary={channel.recipients.length > 0 ? \"Recipients: \" + channel.recipients : \"Recipients: 0\"} />\r\n                                            </ListItem>\r\n\r\n\r\n                                        ))\r\n\r\n                                }\r\n\r\n                            </List>\r\n                        </Collapse>\r\n                    </div>\r\n                </List>\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles, { withTheme: true })(Channels)","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Messages.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\MessageBox.js",["75","76"],"import React, { useState } from 'react'\r\n\r\nexport default function MessageBox(props) {\r\n\r\n    const [textt, setText] = useState('default')\r\n\r\n    const onEnterPress = (e) => {\r\n        if (e.keyCode === 13 && e.shiftKey === false) {\r\n            e.preventDefault();\r\n            props.createNewMess(e)\r\n        }\r\n    }\r\n    const textOnChange = (e) => {\r\n        setText(setText(e.target.value));\r\n        console.log('val', textt);\r\n    }\r\n    const keyD = (e) => {\r\n        if (e.keyCode === 13 && e.shiftKey === false) {\r\n            setText('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div class=\"message-box\">\r\n\r\n            <form onSubmit={props.createNewMess}>\r\n                {/*     {props.resetMessValue ?\r\n                    <textarea value={props.resetMess} name=\"1\" type=\"text\" class=\"message-input\" placeholder=\"Type message...\" onChange={props.getMessValue} onKeyDown={onEnterPress}></textarea>\r\n                    :\r\n                    <textarea type=\"text\" class=\"message-input\" placeholder=\"Type message...\" onChange={props.getMessValue} onKeyDown={onEnterPress}></textarea>\r\n\r\n                } */}\r\n                <textarea value={textt} name=\"1\" type=\"text\" class=\"message-input\" placeholder=\"Type message...\" onChange={(e) => setText(e.target.value)} onKeyDown={keyD}></textarea>\r\n\r\n                <button type=\"submit\" class=\"message-submit\" >Add</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n",["77","78"],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Connection.js",["79","80","81","82","83","84"],"import React, { Component } from 'react';\r\n//import css-File\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport '../../../css/mainscreen/Connection.css';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport axios from 'axios';\r\n\r\nimport SendReceived from '../../fragments/SendReceived';\r\n\r\nclass Connection extends Component {\r\n    state = {\r\n        showConnectToHost: true,\r\n        openConnectToHost: false,\r\n        activateConnectToHost: false,\r\n\r\n        showAddConnection: true,\r\n        openAddConnection: false,\r\n        activateAddConnection: false,\r\n\r\n        newPort: '',\r\n        hostNameToConnect: '',\r\n        hostSocketToConnect: '',\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n\r\n        showHostInfo: false,\r\n        showClientInfo: false,\r\n        openedConnection: {},\r\n\r\n        connectionAttempt: []\r\n\r\n\r\n    }\r\n\r\n\r\n    doConnectToHost = async () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/connect?host=' + this.state.hostNameToConnect + '&port=' + this.state.hostSocketToConnect + '&peer=' + this.props.userName;\r\n        console.log(url);\r\n        let obj = {};\r\n        obj.ip = this.state.hostNameToConnect;\r\n        obj.port = this.state.hostSocketToConnect;\r\n        obj.initialized = false;\r\n        this.setState({ connectionAttempt: [...this.state.connectionAttempt, obj], showClientInfo: true, openConnectToHost: false })\r\n\r\n\r\n        try {\r\n\r\n            const response = await axios.post(url);\r\n            console.log(typeof response.data);\r\n\r\n            //TODO check another type of response ?\r\n            if (typeof response.data === \"object\") {\r\n                //clone array\r\n                let array = this.state.connectionAttempt;\r\n                array.forEach((element, index) => {\r\n                    if (element.ip == response.data.ip && element.port == response.data.port) {\r\n                        array[index] = response.data\r\n                    }\r\n\r\n                });\r\n                console.log(array)\r\n\r\n                //reset the state\r\n                this.setState({ connectionAttempt: array });\r\n\r\n            }\r\n\r\n        }\r\n        catch (err) {\r\n            this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Error: \" + err, alerttype: \"error\" })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    doTerminateConnection = (host, port) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminateconnection?host=' + host + '&port=' + port;\r\n        console.log(\"cancel connection to: \" + host + \":\" + port);\r\n        axios.post(url).then(res => {\r\n\r\n            if (res.data === true) {\r\n                let array = this.state.connectionAttempt;\r\n\r\n                for (var i = array.length - 1; i >= 0; --i) {\r\n\r\n                    if (array[i].ip == host && array[i].port == port) {\r\n                        array.splice(i, 1);\r\n                    }\r\n                }\r\n                this.setState({ connectionAttempt: array, alertopen: !this.state.alertopen, alertmsg: \"Connection successfully canceled\", alerttype: \"success\" });\r\n\r\n            } else {\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't cancel connection attempt\", alerttype: \"error\" })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    doOpenConnection = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/openconnection?port=' + this.state.newPort + '&peer=' + this.props.userName;\r\n        axios.post(url).then(res => {\r\n\r\n            res.data !== \"\" ?\r\n                this.setState({ openedConnection: res.data, showHostInfo: true, openAddConnection: !this.state.openAddConnection, showAddConnection: !this.state.showAddConnection })\r\n\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't open connection\", alerttype: \"error\" })\r\n        });\r\n    }\r\n    doTerminateServer = (e) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminate?port=' + this.state.newPort;\r\n\r\n        axios.post(url).then(res => {\r\n            res.data === true ?\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Host succesfully cancelled\", alerttype: \"success\", showHostInfo: false, showAddConnection: !this.state.showAddConnection })\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't cancel host\", alerttype: \"error\" })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    doSetOnlineMess = (e) => {\r\n        const urlActivate = 'http://localhost:8080/api/v1/asap/activatemess?peer=' + this.props.userName;\r\n        const urlDeactivate = 'http://localhost:8080/api/v1/asap/deactivatemess?peer=' + this.props.userName;\r\n\r\n        e.target.checked ?\r\n            axios.get(urlActivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages activated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't activate online sending messages \", alerttype: \"error\" })\r\n                })\r\n            :\r\n            axios.get(urlDeactivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages deactivated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't deactivate online sending messages \", alerttype: \"error\" })\r\n                })\r\n\r\n    }\r\n    doGetSendReceived = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/getsendreceived?peer=' + this.props.userName + '&storage=' + this.props.appSelectedName + '&value=';\r\n        console.log(url);\r\n        let state;\r\n        axios.get(url).then(res => {\r\n            state = res;\r\n            console.log(\"State:\" + state)\r\n\r\n        })\r\n        return state;\r\n    }\r\n\r\n\r\n    doSetSendReceived = (e) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/setsendreceived?peer=' + this.props.userName + '&storage=' + this.props.appSelectedName + '&value=' + e.target.checked;\r\n        axios.get(url)\r\n            .then(res => {\r\n                res.data === true ?\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Status for send received succesfully set\", alerttype: \"success\" })\r\n                    :\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't set status for send received \", alerttype: \"error\" })\r\n            });\r\n        console.log(url);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { showHostInfo,\r\n            showClientInfo,\r\n            showConnectToHost,\r\n            openConnectToHost,\r\n            activateConnectToHost,\r\n            showAddConnection,\r\n            openAddConnection,\r\n            activateAddConnection,\r\n            alertmsg, alertopen, alerttype,\r\n            openedConnection,\r\n            connectionAttempt } = this.state;\r\n\r\n        function isInt(value) {\r\n            return !isNaN(value) &&\r\n                parseInt(Number(value)) == value &&\r\n                !isNaN(parseInt(value, 10));\r\n        }\r\n\r\n        const validate = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n\r\n                this.setState({ activateAddConnection: true, newPort: e.target.value })\r\n            } else {\r\n                this.setState({ activateAddConnection: false })\r\n            }\r\n        }\r\n\r\n        const validateHostName = (e) => {\r\n            this.setState({ hostNameToConnect: e.target.value }, () => validateConnectToHost())\r\n        }\r\n\r\n        const validateHostSocket = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n                this.setState({ hostSocketToConnect: e.target.value }, () => validateConnectToHost())\r\n            } else {\r\n                this.setState({ hostSocketToConnect: '' }, () => validateConnectToHost())\r\n            }\r\n        }\r\n\r\n        const validateConnectToHost = () => {\r\n            if (this.state.hostNameToConnect.length > 0 && this.state.hostSocketToConnect.length > 0) {\r\n                this.setState({ activateConnectToHost: true })\r\n            } else {\r\n                this.setState({ activateConnectToHost: false })\r\n            }\r\n\r\n        }\r\n\r\n        const showAdd = () => {\r\n            this.setState({ openAddConnection: !openAddConnection })\r\n        }\r\n        const showConnect = () => {\r\n            this.setState({ openConnectToHost: !openConnectToHost })\r\n\r\n        }\r\n\r\n\r\n        const handleClose = (event, reason) => {\r\n            this.setState({ alertopen: !this.state.alertopen });\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"connection-menu\">\r\n                <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={1000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity={alerttype}>\r\n                        {alertmsg}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n\r\n                {connectionAttempt.length > 0 ?\r\n\r\n                    connectionAttempt.map((item, index) => {\r\n                        return (\r\n                            item.initialized === false ?\r\n\r\n                                <div className=\"hosted-server\">\r\n                                    Attempting to connect to {item.ip}:{item.port} ...\r\n                                <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                                :\r\n                                <div className=\"hosted-server\">\r\n                                    Connection to {item.ip}:{item.port} established\r\n                            <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                        )\r\n                    })\r\n\r\n                    :\r\n                    null\r\n                }\r\n\r\n                {showHostInfo ?\r\n                    <div className=\"hosted-server\">\r\n                        <PublicIcon id=\"icon\" />  You are now hosting:<br /> {openedConnection.ip} | Port {openedConnection.port}\r\n                        <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateServer} />\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n\r\n\r\n\r\n                <div className=\"connection\">\r\n                    <p id=\"title\">   <GroupIcon id=\"icon\" /> Available connections</p>\r\n                    <p className=\"connection-information\">  No available connections</p>\r\n                    <CachedIcon id=\"refresh-icon\" />\r\n                </div>\r\n                <div className=\"setting\">\r\n\r\n                    {showConnectToHost ?\r\n                        <p className=\"connection-setting\">\r\n                            Connect to a remote server\r\n                            {\r\n                                openConnectToHost ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showConnect} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showConnect} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n                    {\r\n                        openConnectToHost ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"IP/DNS-Name\" onChange={validateHostName} />\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"Port \" onChange={validateHostSocket} />\r\n\r\n                                {\r\n                                    activateConnectToHost ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doConnectToHost} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n\r\n                    {showAddConnection ?\r\n                        <p className=\"connection-setting\">\r\n                            Open a server\r\n                      {\r\n                                openAddConnection ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showAdd} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showAdd} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n\r\n\r\n\r\n                    {\r\n                        openAddConnection ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"addConnection\" name=\"connectionID\" className=\"input\" placeholder=\"Enter server socket, e.g. 7070 \" onChange={validate} />\r\n\r\n                                {\r\n                                    activateAddConnection ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doOpenConnection} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n                    <p className=\"toggle-setting\">\r\n                        <label class=\"switch\">\r\n                            <input type=\"checkbox\" onChange={this.doSetOnlineMess} />\r\n                            <span class=\"slider round\"></span>\r\n                        </label> Set messages online sending\r\n\r\n                    </p>\r\n                    {\r\n                        this.props.appSelected ?\r\n                            <SendReceived setSendReceived={this.doSetSendReceived} userName={this.props.userName} appSelectedName={this.props.appSelectedName} />\r\n                            :\r\n                            null\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Connection","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\SendReceived.js",[],["85","86"],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":11,"column":42,"nodeType":"93","messageId":"94","endLine":11,"endColumn":50},{"ruleId":"91","severity":1,"message":"95","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":26},{"ruleId":"96","severity":1,"message":"97","line":41,"column":9,"nodeType":"98","messageId":"99","endLine":41,"endColumn":23},{"ruleId":"91","severity":1,"message":"100","line":7,"column":11,"nodeType":"93","messageId":"94","endLine":7,"endColumn":23},{"ruleId":"91","severity":1,"message":"101","line":13,"column":11,"nodeType":"93","messageId":"94","endLine":13,"endColumn":23},{"ruleId":"87","replacedBy":"102"},{"ruleId":"89","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":64,"column":36,"nodeType":"106","messageId":"99","endLine":64,"endColumn":38},{"ruleId":"104","severity":1,"message":"105","line":64,"column":72,"nodeType":"106","messageId":"99","endLine":64,"endColumn":74},{"ruleId":"104","severity":1,"message":"105","line":97,"column":37,"nodeType":"106","messageId":"99","endLine":97,"endColumn":39},{"ruleId":"104","severity":1,"message":"105","line":97,"column":62,"nodeType":"106","messageId":"99","endLine":97,"endColumn":64},{"ruleId":"91","severity":1,"message":"107","line":185,"column":13,"nodeType":"93","messageId":"94","endLine":185,"endColumn":27},{"ruleId":"104","severity":1,"message":"105","line":198,"column":41,"nodeType":"106","messageId":"99","endLine":198,"endColumn":43},{"ruleId":"87","replacedBy":"108"},{"ruleId":"89","replacedBy":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","no-dupe-keys","Duplicate key 'openAddChannel'.","ObjectExpression","unexpected","'onEnterPress' is assigned a value but never used.","'textOnChange' is assigned a value but never used.",["110"],["111"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'showClientInfo' is assigned a value but never used.",["110"],["111"],"no-global-assign","no-unsafe-negation"]