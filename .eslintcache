[{"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\index.js":"1","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\App.js":"2","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\reportWebVitals.js":"3","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js":"4","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js":"5","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\Main.js":"6","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js":"7","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js":"8","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Apps.js":"9","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js":"10","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Channels.js":"11","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Messages.js":"12","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Connection.js":"13","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\SendReceived.js":"14","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\index.js":"15","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\App.js":"16","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\reportWebVitals.js":"17","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js":"18","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js":"19","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js":"20","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js":"21","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js":"22","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\Main.js":"23","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Apps.js":"24","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Connection.js":"25","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Messages.js":"26","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Channels.js":"27","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Era.js":"28","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\SendReceived.js":"29","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\startscreen\\Start.js":"30"},{"size":517,"mtime":1607640335941,"results":"31","hashOfConfig":"32"},{"size":1379,"mtime":1611082046642,"results":"33","hashOfConfig":"32"},{"size":375,"mtime":1607640335942,"results":"34","hashOfConfig":"32"},{"size":541,"mtime":1607640335939,"results":"35","hashOfConfig":"32"},{"size":3320,"mtime":1611418773480,"results":"36","hashOfConfig":"32"},{"size":7230,"mtime":1611418838487,"results":"37","hashOfConfig":"32"},{"size":1274,"mtime":1611416182572,"results":"38","hashOfConfig":"32"},{"size":2545,"mtime":1607687876572,"results":"39","hashOfConfig":"32"},{"size":5343,"mtime":1610291257198,"results":"40","hashOfConfig":"32"},{"size":1336,"mtime":1611425783485,"results":"41","hashOfConfig":"32"},{"size":7983,"mtime":1610291359983,"results":"42","hashOfConfig":"32"},{"size":5768,"mtime":1611321499379,"results":"43","hashOfConfig":"32"},{"size":15234,"mtime":1611083383401,"results":"44","hashOfConfig":"32"},{"size":777,"mtime":1610138451894,"results":"45","hashOfConfig":"32"},{"size":521,"mtime":1613481884984,"results":"46","hashOfConfig":"47"},{"size":711,"mtime":1614188827804,"results":"48","hashOfConfig":"47"},{"size":375,"mtime":1612628324812,"results":"49","hashOfConfig":"47"},{"size":541,"mtime":1613495422269,"results":"50","hashOfConfig":"47"},{"size":3245,"mtime":1616086440655,"results":"51","hashOfConfig":"47"},{"size":1345,"mtime":1615661379702,"results":"52","hashOfConfig":"47"},{"size":1183,"mtime":1613606117159,"results":"53","hashOfConfig":"47"},{"size":2554,"mtime":1613594244041,"results":"54","hashOfConfig":"47"},{"size":7194,"mtime":1616086243280,"results":"55","hashOfConfig":"47"},{"size":5877,"mtime":1614610634820,"results":"56","hashOfConfig":"47"},{"size":14673,"mtime":1614286481477,"results":"57","hashOfConfig":"47"},{"size":7377,"mtime":1613748637919,"results":"58","hashOfConfig":"47"},{"size":8874,"mtime":1613651478990,"results":"59","hashOfConfig":"47"},{"size":1353,"mtime":1613609914077,"results":"60","hashOfConfig":"47"},{"size":783,"mtime":1613779503211,"results":"61","hashOfConfig":"47"},{"size":1164,"mtime":1614383775938,"results":"62","hashOfConfig":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"1u18oea",{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"65"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"65"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"65"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},"sanr91",{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"97"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"97"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"97"},"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\index.js",[],["131","132"],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\App.js",["133"],"import React from 'react';\r\n\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport { ReactComponent as Arrow } from './arrow.svg';\r\nimport Login from './components/loginscreen/Login';\r\nimport Main from './components/mainscreen/Main';\r\nimport Logo from './components/fragments/Footer';\r\nimport axios from 'axios';\r\n\r\nimport { BrowserRouter as Router, Route, Redirect, useHistory } from 'react-router-dom'\r\n\r\nimport './App.css';\r\n\r\nfunction Content() {\r\n  let history = useHistory();\r\n\r\n  const doInitializeApp = () => {\r\n    axios.get('http://localhost:8080/api/v1/asap/start').then(res => {\r\n      if (res.data === true) {\r\n        history.push('/login')\r\n      } else {\r\n        alert.push('something went wrong') //TODO\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n\r\n        <div className=\"content\">\r\n          <div id=\"box\">\r\n            <h1>Welcome to ASAP engine</h1>\r\n            <Arrow id=\"next\" onClick={doInitializeApp} />\r\n          </div>\r\n        </div>\r\n        <Logo />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <SnackbarProvider>\r\n      <Router>\r\n        <Route exact path=\"/\" component={Content} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/main/user\" component={Main} />\r\n      </Router>\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\reportWebVitals.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js",["134"],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\Main.js",["135","136"],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Apps.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Channels.js",["137"],"import React, { Component } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport '../../../css/mainscreen/Channels.css';\r\n\r\nconst styles = theme => ({\r\n    listItemText: {\r\n        fontSize: '20px'\r\n    },\r\n    listItemTextSecondary: {\r\n        color: '#ffffff'\r\n    },\r\n    setSelected: {\r\n        \"&.Mui-selected\": {\r\n            color: \"#F1C653\",\r\n            background: \"rgb(255 255 255 / 11%)\"\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nclass Channels extends Component {\r\n\r\n    state = {\r\n        channels: [],\r\n        open: true,\r\n        openAddChannel: false,\r\n        activateAddChannel: false,\r\n        openAddChannel: false,\r\n        newChannelUrl: '',\r\n        recipients: '',\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n        selectedIndex: Number,\r\n        deselect: false,\r\n        channelSelected: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:8080/api/v1/asap/channels?peer=' + this.props.username + '&storage=' + this.props.appName)\r\n            .then(res => this.setState({ channels: res.data }))\r\n    }\r\n\r\n    doCreateChannel = () => {\r\n        let recipients = this.state.recipients.split(\",\");\r\n        let obj = {\r\n            uri: this.state.newChannelUrl,\r\n            recipients: recipients\r\n        };\r\n\r\n        let url = 'http://localhost:8080/api/v1/asap/channel?peer=' + this.props.username + '&app=' + this.props.appName;\r\n        axios.post(url, obj)\r\n            .then(res => {\r\n                res.data === null ?\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong: Couldn't create channel\", alerttype: \"error\" })\r\n                    :\r\n                    this.setState({ openAddChannel: !this.state.openAddChannel, activateAddChannel: false, newChannelUrl: '', recipients: '' })\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Channel created successfully \", alerttype: \"success\", channels: [...this.state.channels, res.data], openAddChannel: false })\r\n            })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { open, openAddChannel, activateAddChannel, alertmsg, alertopen, alerttype, selectedIndex, deselect, channelSelected } = this.state;\r\n        const { classes } = this.props;\r\n\r\n        const handleClick = (event, index) => {\r\n            this.setState({ open: !this.state.open });\r\n\r\n        };\r\n\r\n        const toggleCreateNewChannel = () => {\r\n            this.setState({ openAddChannel: !this.state.openAddChannel, activateAddChannel: false, newChannelUrl: '', recipients: '' })\r\n        }\r\n\r\n        const validateChannelUrl = (e) => {\r\n            this.setState({ newChannelUrl: e.target.value }, () => validateAddChannel())\r\n\r\n        }\r\n\r\n        const validateRecipients = (e) => {\r\n            this.setState({ recipients: e.target.value }, () => validateAddChannel())\r\n        }\r\n\r\n        const validateAddChannel = () => {\r\n            if (this.state.newChannelUrl.length > 0 && this.state.recipients.length > 0) {\r\n                this.setState({ activateAddChannel: true })\r\n            } else {\r\n                this.setState({ activateAddChannel: false })\r\n            }\r\n        }\r\n\r\n        const handleClose = (event, reason) => {\r\n            this.setState({ alertopen: !this.state.alertopen });\r\n        }\r\n\r\n        const handleListItemClick = (event, index) => {\r\n            this.setState({\r\n                selectedIndex: index,\r\n                deselect: !deselect,\r\n                channelSelected: !channelSelected\r\n\r\n            })\r\n        };\r\n\r\n        const channelOnClick = (event, index, appName, channel) => {\r\n            handleListItemClick(event, index)\r\n            this.props.showMainScreen(appName, channel, channelSelected)\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"channels-container\">\r\n                <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={2000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity={alerttype}>\r\n                        {alertmsg}\r\n                    </Alert>\r\n                </Snackbar>\r\n                <List>\r\n                    <div className=\"title\">\r\n\r\n                        < ListItem button onClick={handleClick}>\r\n                            {open ? <ExpandLess /> : <ExpandMore />}\r\n                            <ListItemText classes={{ primary: classes.listItemText }} primary=\"Channels\" className='parentList' />\r\n                        </ListItem>\r\n                        {\r\n                            openAddChannel ?\r\n                                <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={toggleCreateNewChannel} />\r\n                                :\r\n                                <AddIcon id=\"addIcon\" className=\"icon\" onClick={toggleCreateNewChannel} />\r\n\r\n                        }\r\n\r\n\r\n                    </div>\r\n                    {\r\n                        openAddChannel ?\r\n                            <div className=\"addChannel\">\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"addApp\" name=\"channelname\" className=\"input\" placeholder=\"Enter channel uri\" onChange={validateChannelUrl} />\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"recipients\" name=\"recipients\" className=\"input\" placeholder=\"Enter recipients, e.g. Alice,Bob\" onChange={validateRecipients} />\r\n\r\n                                {\r\n                                    activateAddChannel ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doCreateChannel} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n                    <div className=\"channel-list\">\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <List>\r\n\r\n                                {\r\n                                    this.state.channels.length === 0 ?\r\n\r\n                                        <p className=\"information\"> There are currently no channels avaiable</p>\r\n                                        :\r\n                                        this.state.channels.map((channel, index) => (\r\n                                            <ListItem selected={selectedIndex === index && deselect === true} className={selectedIndex === index && deselect === true ? classes.setSelected : null} onClick={(event) => { channelOnClick(event, index, this.props.appName, channel) }} button id=\"channels\" >\r\n                                                <ListItemText classes={{ secondary: classes.listItemTextSecondary }} primary={channel.uri} secondary={channel.recipients.length > 0 ? \"Recipients: \" + channel.recipients : \"Recipients: 0\"} />\r\n                                            </ListItem>\r\n\r\n\r\n                                        ))\r\n\r\n                                }\r\n\r\n                            </List>\r\n                        </Collapse>\r\n                    </div>\r\n                </List>\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles, { withTheme: true })(Channels)","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Messages.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Connection.js",["138","139","140","141","142","143"],"import React, { Component } from 'react';\r\n//import css-File\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport '../../../css/mainscreen/Connection.css';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport axios from 'axios';\r\n\r\nimport SendReceived from '../../fragments/SendReceived';\r\n\r\nclass Connection extends Component {\r\n    state = {\r\n        showConnectToHost: true,\r\n        openConnectToHost: false,\r\n        activateConnectToHost: false,\r\n\r\n        showAddConnection: true,\r\n        openAddConnection: false,\r\n        activateAddConnection: false,\r\n\r\n        newPort: '',\r\n        hostNameToConnect: '',\r\n        hostSocketToConnect: '',\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n\r\n        showHostInfo: false,\r\n        showClientInfo: false,\r\n        openedConnection: {},\r\n\r\n        connectionAttempt: []\r\n\r\n\r\n    }\r\n\r\n\r\n    doConnectToHost = async () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/connect?host=' + this.state.hostNameToConnect + '&port=' + this.state.hostSocketToConnect + '&peer=' + this.props.userName;\r\n        console.log(url);\r\n        let obj = {};\r\n        obj.ip = this.state.hostNameToConnect;\r\n        obj.port = this.state.hostSocketToConnect;\r\n        obj.initialized = false;\r\n        this.setState({ connectionAttempt: [...this.state.connectionAttempt, obj], showClientInfo: true, openConnectToHost: false })\r\n\r\n\r\n        try {\r\n\r\n            const response = await axios.post(url);\r\n            console.log(typeof response.data);\r\n\r\n            //TODO check another type of response ?\r\n            if (typeof response.data === \"object\") {\r\n                //clone array\r\n                let array = this.state.connectionAttempt;\r\n                array.forEach((element, index) => {\r\n                    if (element.ip == response.data.ip && element.port == response.data.port) {\r\n                        array[index] = response.data\r\n                    }\r\n\r\n                });\r\n                console.log(array)\r\n\r\n                //reset the state\r\n                this.setState({ connectionAttempt: array });\r\n\r\n            }\r\n\r\n        }\r\n        catch (err) {\r\n            this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Error: \" + err, alerttype: \"error\" })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    doTerminateConnection = (host, port) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminateconnection?host=' + host + '&port=' + port;\r\n        console.log(\"cancel connection to: \" + host + \":\" + port);\r\n        axios.post(url).then(res => {\r\n\r\n            if (res.data === true) {\r\n                let array = this.state.connectionAttempt;\r\n\r\n                for (var i = array.length - 1; i >= 0; --i) {\r\n\r\n                    if (array[i].ip == host && array[i].port == port) {\r\n                        array.splice(i, 1);\r\n                    }\r\n                }\r\n                this.setState({ connectionAttempt: array, alertopen: !this.state.alertopen, alertmsg: \"Connection successfully canceled\", alerttype: \"success\" });\r\n\r\n            } else {\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't cancel connection attempt\", alerttype: \"error\" })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    doOpenConnection = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/openconnection?port=' + this.state.newPort + '&peer=' + this.props.userName;\r\n        axios.post(url).then(res => {\r\n\r\n            res.data !== \"\" ?\r\n                this.setState({ openedConnection: res.data, showHostInfo: true, openAddConnection: !this.state.openAddConnection, showAddConnection: !this.state.showAddConnection })\r\n\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't open connection\", alerttype: \"error\" })\r\n        });\r\n    }\r\n    doTerminateServer = (e) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminate?port=' + this.state.newPort;\r\n\r\n        axios.post(url).then(res => {\r\n            res.data === true ?\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Host succesfully cancelled\", alerttype: \"success\", showHostInfo: false, showAddConnection: !this.state.showAddConnection })\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't cancel host\", alerttype: \"error\" })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    doSetOnlineMess = (e) => {\r\n        const urlActivate = 'http://localhost:8080/api/v1/asap/activatemess?peer=' + this.props.userName;\r\n        const urlDeactivate = 'http://localhost:8080/api/v1/asap/deactivatemess?peer=' + this.props.userName;\r\n\r\n        e.target.checked ?\r\n            axios.get(urlActivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages activated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't activate online sending messages \", alerttype: \"error\" })\r\n                })\r\n            :\r\n            axios.get(urlDeactivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages deactivated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't deactivate online sending messages \", alerttype: \"error\" })\r\n                })\r\n\r\n    }\r\n    doGetSendReceived = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/getsendreceived?peer=' + this.props.userName + '&storage=' + this.props.appSelectedName + '&value=';\r\n        console.log(url);\r\n        let state;\r\n        axios.get(url).then(res => {\r\n            state = res;\r\n            console.log(\"State:\" + state)\r\n\r\n        })\r\n        return state;\r\n    }\r\n\r\n\r\n    doSetSendReceived = (e) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/setsendreceived?peer=' + this.props.userName + '&storage=' + this.props.appSelectedName + '&value=' + e.target.checked;\r\n        axios.get(url)\r\n            .then(res => {\r\n                res.data === true ?\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Status for send received succesfully set\", alerttype: \"success\" })\r\n                    :\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't set status for send received \", alerttype: \"error\" })\r\n            });\r\n        console.log(url);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { showHostInfo,\r\n            showClientInfo,\r\n            showConnectToHost,\r\n            openConnectToHost,\r\n            activateConnectToHost,\r\n            showAddConnection,\r\n            openAddConnection,\r\n            activateAddConnection,\r\n            alertmsg, alertopen, alerttype,\r\n            openedConnection,\r\n            connectionAttempt } = this.state;\r\n\r\n        function isInt(value) {\r\n            return !isNaN(value) &&\r\n                parseInt(Number(value)) == value &&\r\n                !isNaN(parseInt(value, 10));\r\n        }\r\n\r\n        const validate = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n\r\n                this.setState({ activateAddConnection: true, newPort: e.target.value })\r\n            } else {\r\n                this.setState({ activateAddConnection: false })\r\n            }\r\n        }\r\n\r\n        const validateHostName = (e) => {\r\n            this.setState({ hostNameToConnect: e.target.value }, () => validateConnectToHost())\r\n        }\r\n\r\n        const validateHostSocket = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n                this.setState({ hostSocketToConnect: e.target.value }, () => validateConnectToHost())\r\n            } else {\r\n                this.setState({ hostSocketToConnect: '' }, () => validateConnectToHost())\r\n            }\r\n        }\r\n\r\n        const validateConnectToHost = () => {\r\n            if (this.state.hostNameToConnect.length > 0 && this.state.hostSocketToConnect.length > 0) {\r\n                this.setState({ activateConnectToHost: true })\r\n            } else {\r\n                this.setState({ activateConnectToHost: false })\r\n            }\r\n\r\n        }\r\n\r\n        const showAdd = () => {\r\n            this.setState({ openAddConnection: !openAddConnection })\r\n        }\r\n        const showConnect = () => {\r\n            this.setState({ openConnectToHost: !openConnectToHost })\r\n\r\n        }\r\n\r\n\r\n        const handleClose = (event, reason) => {\r\n            this.setState({ alertopen: !this.state.alertopen });\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"connection-menu\">\r\n                <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={1000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity={alerttype}>\r\n                        {alertmsg}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n\r\n                {connectionAttempt.length > 0 ?\r\n\r\n                    connectionAttempt.map((item, index) => {\r\n                        return (\r\n                            item.initialized === false ?\r\n\r\n                                <div className=\"hosted-server\">\r\n                                    Attempting to connect to {item.ip}:{item.port} ...\r\n                                <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                                :\r\n                                <div className=\"hosted-server\">\r\n                                    Connection to {item.ip}:{item.port} established\r\n                            <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                        )\r\n                    })\r\n\r\n                    :\r\n                    null\r\n                }\r\n\r\n                {showHostInfo ?\r\n                    <div className=\"hosted-server\">\r\n                        <PublicIcon id=\"icon\" />  You are now hosting:<br /> {openedConnection.ip} | Port {openedConnection.port}\r\n                        <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateServer} />\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n\r\n\r\n\r\n                <div className=\"connection\">\r\n                    <p id=\"title\">   <GroupIcon id=\"icon\" /> Available connections</p>\r\n                    <p className=\"connection-information\">  No available connections</p>\r\n                    <CachedIcon id=\"refresh-icon\" />\r\n                </div>\r\n                <div className=\"setting\">\r\n\r\n                    {showConnectToHost ?\r\n                        <p className=\"connection-setting\">\r\n                            Connect to a remote server\r\n                            {\r\n                                openConnectToHost ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showConnect} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showConnect} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n                    {\r\n                        openConnectToHost ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"IP/DNS-Name\" onChange={validateHostName} />\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"Port \" onChange={validateHostSocket} />\r\n\r\n                                {\r\n                                    activateConnectToHost ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doConnectToHost} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n\r\n                    {showAddConnection ?\r\n                        <p className=\"connection-setting\">\r\n                            Open a server\r\n                      {\r\n                                openAddConnection ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showAdd} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showAdd} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n\r\n\r\n\r\n                    {\r\n                        openAddConnection ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"addConnection\" name=\"connectionID\" className=\"input\" placeholder=\"Enter server socket, e.g. 7070 \" onChange={validate} />\r\n\r\n                                {\r\n                                    activateAddConnection ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doOpenConnection} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n                    <p className=\"toggle-setting\">\r\n                        <label class=\"switch\">\r\n                            <input type=\"checkbox\" onChange={this.doSetOnlineMess} />\r\n                            <span class=\"slider round\"></span>\r\n                        </label> Set messages online sending\r\n\r\n                    </p>\r\n                    {\r\n                        this.props.appSelected ?\r\n                            <SendReceived setSendReceived={this.doSetSendReceived} userName={this.props.userName} appSelectedName={this.props.appSelectedName} />\r\n                            :\r\n                            null\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Connection","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\SendReceived.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\index.js",[],["144","145"],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\App.js",["146","147"],"import React from 'react';\r\n\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport { ReactComponent as Arrow } from './arrow.svg';\r\nimport Login from './components/loginscreen/Login';\r\nimport Main from './components/dashboard/Main';\r\nimport Start from './components/startscreen/Start';\r\n\r\nimport { BrowserRouter as Router, Route, useHistory } from 'react-router-dom'\r\n\r\nimport './css/App.css';\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <SnackbarProvider>\r\n      <Router>\r\n        <Route exact path=\"/\" component={Start} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/main/user\" component={Main} />\r\n      </Router>\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\reportWebVitals.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\Main.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Apps.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Connection.js",["148","149","150","151","152"],"import React, { Component } from 'react';\r\n//import css-File\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport '../../../css/mainscreen/Connection.css';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport axios from 'axios';\r\n\r\nimport SendReceived from './SendReceived';\r\n\r\nclass Connection extends Component {\r\n    state = {\r\n        showConnectToHost: true,\r\n        openConnectToHost: false,\r\n        activateConnectToHost: false,\r\n\r\n        showAddConnection: true,\r\n        openAddConnection: false,\r\n        activateAddConnection: false,\r\n\r\n        newPort: '',\r\n        hostNameToConnect: '',\r\n        hostSocketToConnect: '',\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n\r\n        showHostInfo: false,\r\n        showClientInfo: false,\r\n        openedConnection: {},\r\n\r\n        connectionAttempt: []\r\n\r\n\r\n    }\r\n\r\n\r\n    doConnectToHost = async () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/connect?host=' + this.state.hostNameToConnect + '&port=' + this.state.hostSocketToConnect + '&peer=' + this.props.userName;\r\n        //   console.log(url);\r\n        let obj = {};\r\n        obj.ip = this.state.hostNameToConnect;\r\n        obj.port = this.state.hostSocketToConnect;\r\n        obj.initialized = false;\r\n        this.setState({ connectionAttempt: [...this.state.connectionAttempt, obj], showClientInfo: true, openConnectToHost: false })\r\n        try {\r\n            const response = await axios.post(url);\r\n            if (typeof response.data === \"object\") {\r\n                //clone array\r\n                let array = this.state.connectionAttempt;\r\n                array.forEach((element, index) => {\r\n                    //search for same object\r\n                    if (element.ip == response.data.ip && element.port == response.data.port) {\r\n                        //replace with new object\r\n                        array[index] = response.data\r\n                    }\r\n                });\r\n                console.log(array)\r\n                //reset the state\r\n                this.setState({ connectionAttempt: array });\r\n            }\r\n        }\r\n        catch (err) {\r\n            this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Error: \" + err, alerttype: \"error\" })\r\n        }\r\n    }\r\n\r\n    doTerminateConnection = (host, port) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminateconnection?host=' + host + '&port=' + port;\r\n        axios.post(url).then(res => {\r\n            if (res.data === true) {\r\n                let array = this.state.connectionAttempt;\r\n                for (var i = array.length - 1; i >= 0; --i) {\r\n                    if (array[i].ip == host && array[i].port == port) {\r\n                        array.splice(i, 1);\r\n                    }\r\n                }\r\n                this.setState({ connectionAttempt: array, alertopen: !this.state.alertopen, alertmsg: \"Connection successfully canceled\", alerttype: \"success\" });\r\n            } else {\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't cancel connection attempt\", alerttype: \"error\" })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    doOpenServer = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/openconnection?port=' + this.state.newPort + '&peer=' + this.props.userName;\r\n        axios.post(url).then(res => {\r\n            res.data !== \"\" ?\r\n                this.setState({ openedConnection: res.data, showHostInfo: true, openAddConnection: !this.state.openAddConnection, showAddConnection: !this.state.showAddConnection })\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't open connection\", alerttype: \"error\" })\r\n        });\r\n    }\r\n    doTerminateServer = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminate?port=' + this.state.newPort;\r\n        axios.post(url).then(res => {\r\n            res.data === true ?\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Host succesfully cancelled\", alerttype: \"success\", showHostInfo: false, showAddConnection: !this.state.showAddConnection })\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't cancel host\", alerttype: \"error\" })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    doSetOnlineMess = (e) => {\r\n        const urlActivate = 'http://localhost:8080/api/v1/asap/activatemess?peer=' + this.props.userName;\r\n        const urlDeactivate = 'http://localhost:8080/api/v1/asap/deactivatemess?peer=' + this.props.userName;\r\n\r\n        e.target.checked ?\r\n            axios.get(urlActivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages activated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't activate online sending messages \", alerttype: \"error\" })\r\n                })\r\n            :\r\n            axios.get(urlDeactivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages deactivated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't deactivate online sending messages \", alerttype: \"error\" })\r\n                })\r\n\r\n    }\r\n    doSetSendReceived = (e) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/setsendreceived?peer=' + this.props.userName + '&storage=' + this.props.appSelectedName + '&value=' + e.target.checked;\r\n        axios.get(url)\r\n            .then(res => {\r\n                res.data === true ?\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Status for send received succesfully set\", alerttype: \"success\" })\r\n                    :\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't set status for send received \", alerttype: \"error\" })\r\n            });\r\n        console.log(url);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { showHostInfo,\r\n            showConnectToHost,\r\n            openConnectToHost,\r\n            activateConnectToHost,\r\n            showAddConnection,\r\n            openAddConnection,\r\n            activateAddConnection,\r\n            alertmsg, alertopen, alerttype,\r\n            openedConnection,\r\n            connectionAttempt } = this.state;\r\n\r\n        function isInt(value) {\r\n            return !isNaN(value) &&\r\n                parseInt(Number(value)) == value &&\r\n                !isNaN(parseInt(value, 10));\r\n        }\r\n\r\n        const validate = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n\r\n                this.setState({ activateAddConnection: true, newPort: e.target.value })\r\n            } else {\r\n                this.setState({ activateAddConnection: false })\r\n            }\r\n        }\r\n\r\n        const validateHostName = (e) => {\r\n            this.setState({ hostNameToConnect: e.target.value }, () => validateConnectToHost())\r\n        }\r\n\r\n        const validateHostSocket = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n                this.setState({ hostSocketToConnect: e.target.value }, () => validateConnectToHost())\r\n            } else {\r\n                this.setState({ hostSocketToConnect: '' }, () => validateConnectToHost())\r\n            }\r\n        }\r\n\r\n        const validateConnectToHost = () => {\r\n            if (this.state.hostNameToConnect.length > 0 && this.state.hostSocketToConnect.length > 0) {\r\n                this.setState({ activateConnectToHost: true })\r\n            } else {\r\n                this.setState({ activateConnectToHost: false })\r\n            }\r\n\r\n        }\r\n\r\n        const showAdd = () => {\r\n            this.setState({ openAddConnection: !openAddConnection })\r\n        }\r\n        const showConnect = () => {\r\n            this.setState({ openConnectToHost: !openConnectToHost })\r\n\r\n        }\r\n\r\n\r\n        const handleClose = (event, reason) => {\r\n            this.setState({ alertopen: !this.state.alertopen });\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"connection-menu\">\r\n                <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={1000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity={alerttype}>\r\n                        {alertmsg}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n\r\n                {connectionAttempt.length > 0 ?\r\n\r\n                    connectionAttempt.map((item, index) => {\r\n                        return (\r\n                            item.initialized === false ?\r\n\r\n                                <div className=\"hosted-server\">\r\n                                    Attempting to connect to {item.ip}:{item.port} ...\r\n                                <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                                :\r\n                                <div className=\"hosted-server\">\r\n                                    Connection to {item.ip}:{item.port} established\r\n                            <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                        )\r\n                    })\r\n\r\n                    :\r\n                    null\r\n                }\r\n\r\n                {showHostInfo ?\r\n                    <div className=\"hosted-server\">\r\n                        <PublicIcon id=\"icon\" />  You are now hosting:<br /> {openedConnection.ip} | Port {openedConnection.port}\r\n                        <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateServer} />\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n\r\n\r\n\r\n                <div className=\"connection\">\r\n                    <p id=\"title\">   <GroupIcon id=\"icon\" /> Available connections</p>\r\n                    <p className=\"connection-information\">  No available connections</p>\r\n                    <CachedIcon id=\"refresh-icon\" />\r\n                </div>\r\n                <div className=\"setting\">\r\n\r\n                    {showConnectToHost ?\r\n                        <p className=\"connection-setting\">\r\n                            Connect to a remote server\r\n                            {\r\n                                openConnectToHost ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showConnect} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showConnect} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n                    {\r\n                        openConnectToHost ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"IP/DNS-Name\" onChange={validateHostName} />\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"Port \" onChange={validateHostSocket} />\r\n\r\n                                {\r\n                                    activateConnectToHost ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doConnectToHost} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n\r\n                    {showAddConnection ?\r\n                        <p className=\"connection-setting\">\r\n                            Open a server\r\n                      {\r\n                                openAddConnection ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showAdd} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showAdd} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n\r\n\r\n\r\n                    {\r\n                        openAddConnection ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"addConnection\" name=\"connectionID\" className=\"input\" placeholder=\"Enter server socket, e.g. 7070 \" onChange={validate} />\r\n\r\n                                {\r\n                                    activateAddConnection ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doOpenServer} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n                    <p className=\"toggle-setting\">\r\n                        <label class=\"switch\">\r\n                            <input type=\"checkbox\" onChange={this.doSetOnlineMess} />\r\n                            <span class=\"slider round\"></span>\r\n                        </label> Set messages online sending\r\n\r\n                    </p>\r\n                    {\r\n                        this.props.appSelected ?\r\n                            <SendReceived setSendReceived={this.doSetSendReceived} userName={this.props.userName} appSelectedName={this.props.appSelectedName} />\r\n                            :\r\n                            null\r\n\r\n                    }\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Connection","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Messages.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Channels.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\Era.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\dashboard\\subcomponents\\SendReceived.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\startscreen\\Start.js",["153"],"import React from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Footer from '../fragments/Footer';\r\nimport { ReactComponent as Arrow } from '../../arrow.svg';\r\n\r\n\r\nexport default function Start() {\r\n    let history = useHistory();\r\n\r\n    const doInitializeApp = () => {\r\n        axios.get('http://localhost:8080/api/v1/asap/start')\r\n            .then(res => {\r\n                if (res.data == true) {\r\n                    history.push('/login')\r\n                } else {\r\n                    alert('something went wrong. Could not start the application')\r\n                }\r\n            }).catch(err => {\r\n                alert('something went wrong. Could not contact the server!')\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n\r\n                <div className=\"content\">\r\n                    <div id=\"box\">\r\n                        <h1>Welcome to ASAP engine</h1>\r\n                        <Arrow id=\"next\" onClick={doInitializeApp} />\r\n                    </div>\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n",{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":11,"column":42,"nodeType":"160","messageId":"161","endLine":11,"endColumn":50},{"ruleId":"158","severity":1,"message":"162","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":26},{"ruleId":"158","severity":1,"message":"163","line":91,"column":89,"nodeType":"160","messageId":"161","endLine":91,"endColumn":99},{"ruleId":"158","severity":1,"message":"164","line":91,"column":101,"nodeType":"160","messageId":"161","endLine":91,"endColumn":110},{"ruleId":"165","severity":1,"message":"166","line":41,"column":9,"nodeType":"167","messageId":"168","endLine":41,"endColumn":23},{"ruleId":"169","severity":1,"message":"170","line":64,"column":36,"nodeType":"171","messageId":"168","endLine":64,"endColumn":38},{"ruleId":"169","severity":1,"message":"170","line":64,"column":72,"nodeType":"171","messageId":"168","endLine":64,"endColumn":74},{"ruleId":"169","severity":1,"message":"170","line":97,"column":37,"nodeType":"171","messageId":"168","endLine":97,"endColumn":39},{"ruleId":"169","severity":1,"message":"170","line":97,"column":62,"nodeType":"171","messageId":"168","endLine":97,"endColumn":64},{"ruleId":"158","severity":1,"message":"172","line":185,"column":13,"nodeType":"160","messageId":"161","endLine":185,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":198,"column":41,"nodeType":"171","messageId":"168","endLine":198,"endColumn":43},{"ruleId":"154","replacedBy":"173"},{"ruleId":"156","replacedBy":"174"},{"ruleId":"158","severity":1,"message":"175","line":5,"column":28,"nodeType":"160","messageId":"161","endLine":5,"endColumn":33},{"ruleId":"158","severity":1,"message":"176","line":10,"column":42,"nodeType":"160","messageId":"161","endLine":10,"endColumn":52},{"ruleId":"169","severity":1,"message":"170","line":59,"column":36,"nodeType":"171","messageId":"168","endLine":59,"endColumn":38},{"ruleId":"169","severity":1,"message":"170","line":59,"column":72,"nodeType":"171","messageId":"168","endLine":59,"endColumn":74},{"ruleId":"169","severity":1,"message":"170","line":80,"column":37,"nodeType":"171","messageId":"168","endLine":80,"endColumn":39},{"ruleId":"169","severity":1,"message":"170","line":80,"column":62,"nodeType":"171","messageId":"168","endLine":80,"endColumn":64},{"ruleId":"169","severity":1,"message":"170","line":163,"column":41,"nodeType":"171","messageId":"168","endLine":163,"endColumn":43},{"ruleId":"169","severity":1,"message":"170","line":14,"column":30,"nodeType":"171","messageId":"168","endLine":14,"endColumn":32},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'notifyopen' is assigned a value but never used.","'notifymsg' is assigned a value but never used.","no-dupe-keys","Duplicate key 'openAddChannel'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'showClientInfo' is assigned a value but never used.",["177"],["178"],"'Arrow' is defined but never used.","'useHistory' is defined but never used.","no-global-assign","no-unsafe-negation"]