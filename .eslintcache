[{"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\index.js":"1","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\App.js":"2","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\reportWebVitals.js":"3","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js":"4","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js":"5","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\Main.js":"6","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js":"7","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js":"8","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Apps.js":"9","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js":"10","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Channels.js":"11","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Messages.js":"12","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Connection.js":"13","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\SendReceived.js":"14","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\index.js":"15","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\App.js":"16","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\reportWebVitals.js":"17","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js":"18","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js":"19","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\Main.js":"20","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js":"21","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js":"22","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Apps.js":"23","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js":"24","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Messages.js":"25","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Connection.js":"26","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Channels.js":"27","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\SendReceived.js":"28","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Era.js":"29"},{"size":517,"mtime":1607640335941,"results":"30","hashOfConfig":"31"},{"size":1379,"mtime":1611082046642,"results":"32","hashOfConfig":"31"},{"size":375,"mtime":1607640335942,"results":"33","hashOfConfig":"31"},{"size":541,"mtime":1607640335939,"results":"34","hashOfConfig":"31"},{"size":3320,"mtime":1611418773480,"results":"35","hashOfConfig":"31"},{"size":7230,"mtime":1611418838487,"results":"36","hashOfConfig":"31"},{"size":1274,"mtime":1611416182572,"results":"37","hashOfConfig":"31"},{"size":2545,"mtime":1607687876572,"results":"38","hashOfConfig":"31"},{"size":5343,"mtime":1610291257198,"results":"39","hashOfConfig":"31"},{"size":1336,"mtime":1611425783485,"results":"40","hashOfConfig":"31"},{"size":7983,"mtime":1610291359983,"results":"41","hashOfConfig":"31"},{"size":5768,"mtime":1611321499379,"results":"42","hashOfConfig":"31"},{"size":15234,"mtime":1611083383401,"results":"43","hashOfConfig":"31"},{"size":777,"mtime":1610138451894,"results":"44","hashOfConfig":"31"},{"size":517,"mtime":1612628324811,"results":"45","hashOfConfig":"46"},{"size":1379,"mtime":1612628324797,"results":"47","hashOfConfig":"46"},{"size":375,"mtime":1612628324812,"results":"48","hashOfConfig":"46"},{"size":541,"mtime":1612628324799,"results":"49","hashOfConfig":"46"},{"size":3320,"mtime":1612628324801,"results":"50","hashOfConfig":"46"},{"size":7230,"mtime":1612628324803,"results":"51","hashOfConfig":"46"},{"size":1336,"mtime":1612628324800,"results":"52","hashOfConfig":"46"},{"size":1274,"mtime":1612628324802,"results":"53","hashOfConfig":"46"},{"size":5533,"mtime":1612717932488,"results":"54","hashOfConfig":"46"},{"size":2545,"mtime":1612628324802,"results":"55","hashOfConfig":"46"},{"size":7108,"mtime":1612708748938,"results":"56","hashOfConfig":"46"},{"size":15234,"mtime":1612628324805,"results":"57","hashOfConfig":"46"},{"size":8911,"mtime":1612728607531,"results":"58","hashOfConfig":"46"},{"size":777,"mtime":1612628324800,"results":"59","hashOfConfig":"46"},{"size":1349,"mtime":1612731290853,"results":"60","hashOfConfig":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"1u18oea",{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"63"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"63"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"sanr91",{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"95"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"95"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"95"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\index.js",[],["127","128"],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\App.js",["129"],"import React from 'react';\r\n\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport { ReactComponent as Arrow } from './arrow.svg';\r\nimport Login from './components/loginscreen/Login';\r\nimport Main from './components/mainscreen/Main';\r\nimport Logo from './components/fragments/Footer';\r\nimport axios from 'axios';\r\n\r\nimport { BrowserRouter as Router, Route, Redirect, useHistory } from 'react-router-dom'\r\n\r\nimport './App.css';\r\n\r\nfunction Content() {\r\n  let history = useHistory();\r\n\r\n  const doInitializeApp = () => {\r\n    axios.get('http://localhost:8080/api/v1/asap/start').then(res => {\r\n      if (res.data === true) {\r\n        history.push('/login')\r\n      } else {\r\n        alert.push('something went wrong') //TODO\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n\r\n        <div className=\"content\">\r\n          <div id=\"box\">\r\n            <h1>Welcome to ASAP engine</h1>\r\n            <Arrow id=\"next\" onClick={doInitializeApp} />\r\n          </div>\r\n        </div>\r\n        <Logo />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <SnackbarProvider>\r\n      <Router>\r\n        <Route exact path=\"/\" component={Content} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/main/user\" component={Main} />\r\n      </Router>\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\reportWebVitals.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js",["130"],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\Main.js",["131","132"],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Apps.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Channels.js",["133"],"import React, { Component } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport '../../../css/mainscreen/Channels.css';\r\n\r\nconst styles = theme => ({\r\n    listItemText: {\r\n        fontSize: '20px'\r\n    },\r\n    listItemTextSecondary: {\r\n        color: '#ffffff'\r\n    },\r\n    setSelected: {\r\n        \"&.Mui-selected\": {\r\n            color: \"#F1C653\",\r\n            background: \"rgb(255 255 255 / 11%)\"\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nclass Channels extends Component {\r\n\r\n    state = {\r\n        channels: [],\r\n        open: true,\r\n        openAddChannel: false,\r\n        activateAddChannel: false,\r\n        openAddChannel: false,\r\n        newChannelUrl: '',\r\n        recipients: '',\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n        selectedIndex: Number,\r\n        deselect: false,\r\n        channelSelected: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:8080/api/v1/asap/channels?peer=' + this.props.username + '&storage=' + this.props.appName)\r\n            .then(res => this.setState({ channels: res.data }))\r\n    }\r\n\r\n    doCreateChannel = () => {\r\n        let recipients = this.state.recipients.split(\",\");\r\n        let obj = {\r\n            uri: this.state.newChannelUrl,\r\n            recipients: recipients\r\n        };\r\n\r\n        let url = 'http://localhost:8080/api/v1/asap/channel?peer=' + this.props.username + '&app=' + this.props.appName;\r\n        axios.post(url, obj)\r\n            .then(res => {\r\n                res.data === null ?\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong: Couldn't create channel\", alerttype: \"error\" })\r\n                    :\r\n                    this.setState({ openAddChannel: !this.state.openAddChannel, activateAddChannel: false, newChannelUrl: '', recipients: '' })\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Channel created successfully \", alerttype: \"success\", channels: [...this.state.channels, res.data], openAddChannel: false })\r\n            })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { open, openAddChannel, activateAddChannel, alertmsg, alertopen, alerttype, selectedIndex, deselect, channelSelected } = this.state;\r\n        const { classes } = this.props;\r\n\r\n        const handleClick = (event, index) => {\r\n            this.setState({ open: !this.state.open });\r\n\r\n        };\r\n\r\n        const toggleCreateNewChannel = () => {\r\n            this.setState({ openAddChannel: !this.state.openAddChannel, activateAddChannel: false, newChannelUrl: '', recipients: '' })\r\n        }\r\n\r\n        const validateChannelUrl = (e) => {\r\n            this.setState({ newChannelUrl: e.target.value }, () => validateAddChannel())\r\n\r\n        }\r\n\r\n        const validateRecipients = (e) => {\r\n            this.setState({ recipients: e.target.value }, () => validateAddChannel())\r\n        }\r\n\r\n        const validateAddChannel = () => {\r\n            if (this.state.newChannelUrl.length > 0 && this.state.recipients.length > 0) {\r\n                this.setState({ activateAddChannel: true })\r\n            } else {\r\n                this.setState({ activateAddChannel: false })\r\n            }\r\n        }\r\n\r\n        const handleClose = (event, reason) => {\r\n            this.setState({ alertopen: !this.state.alertopen });\r\n        }\r\n\r\n        const handleListItemClick = (event, index) => {\r\n            this.setState({\r\n                selectedIndex: index,\r\n                deselect: !deselect,\r\n                channelSelected: !channelSelected\r\n\r\n            })\r\n        };\r\n\r\n        const channelOnClick = (event, index, appName, channel) => {\r\n            handleListItemClick(event, index)\r\n            this.props.showMainScreen(appName, channel, channelSelected)\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"channels-container\">\r\n                <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={2000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity={alerttype}>\r\n                        {alertmsg}\r\n                    </Alert>\r\n                </Snackbar>\r\n                <List>\r\n                    <div className=\"title\">\r\n\r\n                        < ListItem button onClick={handleClick}>\r\n                            {open ? <ExpandLess /> : <ExpandMore />}\r\n                            <ListItemText classes={{ primary: classes.listItemText }} primary=\"Channels\" className='parentList' />\r\n                        </ListItem>\r\n                        {\r\n                            openAddChannel ?\r\n                                <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={toggleCreateNewChannel} />\r\n                                :\r\n                                <AddIcon id=\"addIcon\" className=\"icon\" onClick={toggleCreateNewChannel} />\r\n\r\n                        }\r\n\r\n\r\n                    </div>\r\n                    {\r\n                        openAddChannel ?\r\n                            <div className=\"addChannel\">\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"addApp\" name=\"channelname\" className=\"input\" placeholder=\"Enter channel uri\" onChange={validateChannelUrl} />\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"recipients\" name=\"recipients\" className=\"input\" placeholder=\"Enter recipients, e.g. Alice,Bob\" onChange={validateRecipients} />\r\n\r\n                                {\r\n                                    activateAddChannel ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doCreateChannel} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n                    <div className=\"channel-list\">\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <List>\r\n\r\n                                {\r\n                                    this.state.channels.length === 0 ?\r\n\r\n                                        <p className=\"information\"> There are currently no channels avaiable</p>\r\n                                        :\r\n                                        this.state.channels.map((channel, index) => (\r\n                                            <ListItem selected={selectedIndex === index && deselect === true} className={selectedIndex === index && deselect === true ? classes.setSelected : null} onClick={(event) => { channelOnClick(event, index, this.props.appName, channel) }} button id=\"channels\" >\r\n                                                <ListItemText classes={{ secondary: classes.listItemTextSecondary }} primary={channel.uri} secondary={channel.recipients.length > 0 ? \"Recipients: \" + channel.recipients : \"Recipients: 0\"} />\r\n                                            </ListItem>\r\n\r\n\r\n                                        ))\r\n\r\n                                }\r\n\r\n                            </List>\r\n                        </Collapse>\r\n                    </div>\r\n                </List>\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles, { withTheme: true })(Channels)","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Messages.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Connection.js",["134","135","136","137","138","139"],"import React, { Component } from 'react';\r\n//import css-File\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport '../../../css/mainscreen/Connection.css';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport axios from 'axios';\r\n\r\nimport SendReceived from '../../fragments/SendReceived';\r\n\r\nclass Connection extends Component {\r\n    state = {\r\n        showConnectToHost: true,\r\n        openConnectToHost: false,\r\n        activateConnectToHost: false,\r\n\r\n        showAddConnection: true,\r\n        openAddConnection: false,\r\n        activateAddConnection: false,\r\n\r\n        newPort: '',\r\n        hostNameToConnect: '',\r\n        hostSocketToConnect: '',\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n\r\n        showHostInfo: false,\r\n        showClientInfo: false,\r\n        openedConnection: {},\r\n\r\n        connectionAttempt: []\r\n\r\n\r\n    }\r\n\r\n\r\n    doConnectToHost = async () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/connect?host=' + this.state.hostNameToConnect + '&port=' + this.state.hostSocketToConnect + '&peer=' + this.props.userName;\r\n        console.log(url);\r\n        let obj = {};\r\n        obj.ip = this.state.hostNameToConnect;\r\n        obj.port = this.state.hostSocketToConnect;\r\n        obj.initialized = false;\r\n        this.setState({ connectionAttempt: [...this.state.connectionAttempt, obj], showClientInfo: true, openConnectToHost: false })\r\n\r\n\r\n        try {\r\n\r\n            const response = await axios.post(url);\r\n            console.log(typeof response.data);\r\n\r\n            //TODO check another type of response ?\r\n            if (typeof response.data === \"object\") {\r\n                //clone array\r\n                let array = this.state.connectionAttempt;\r\n                array.forEach((element, index) => {\r\n                    if (element.ip == response.data.ip && element.port == response.data.port) {\r\n                        array[index] = response.data\r\n                    }\r\n\r\n                });\r\n                console.log(array)\r\n\r\n                //reset the state\r\n                this.setState({ connectionAttempt: array });\r\n\r\n            }\r\n\r\n        }\r\n        catch (err) {\r\n            this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Error: \" + err, alerttype: \"error\" })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    doTerminateConnection = (host, port) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminateconnection?host=' + host + '&port=' + port;\r\n        console.log(\"cancel connection to: \" + host + \":\" + port);\r\n        axios.post(url).then(res => {\r\n\r\n            if (res.data === true) {\r\n                let array = this.state.connectionAttempt;\r\n\r\n                for (var i = array.length - 1; i >= 0; --i) {\r\n\r\n                    if (array[i].ip == host && array[i].port == port) {\r\n                        array.splice(i, 1);\r\n                    }\r\n                }\r\n                this.setState({ connectionAttempt: array, alertopen: !this.state.alertopen, alertmsg: \"Connection successfully canceled\", alerttype: \"success\" });\r\n\r\n            } else {\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't cancel connection attempt\", alerttype: \"error\" })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    doOpenConnection = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/openconnection?port=' + this.state.newPort + '&peer=' + this.props.userName;\r\n        axios.post(url).then(res => {\r\n\r\n            res.data !== \"\" ?\r\n                this.setState({ openedConnection: res.data, showHostInfo: true, openAddConnection: !this.state.openAddConnection, showAddConnection: !this.state.showAddConnection })\r\n\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't open connection\", alerttype: \"error\" })\r\n        });\r\n    }\r\n    doTerminateServer = (e) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminate?port=' + this.state.newPort;\r\n\r\n        axios.post(url).then(res => {\r\n            res.data === true ?\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Host succesfully cancelled\", alerttype: \"success\", showHostInfo: false, showAddConnection: !this.state.showAddConnection })\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't cancel host\", alerttype: \"error\" })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    doSetOnlineMess = (e) => {\r\n        const urlActivate = 'http://localhost:8080/api/v1/asap/activatemess?peer=' + this.props.userName;\r\n        const urlDeactivate = 'http://localhost:8080/api/v1/asap/deactivatemess?peer=' + this.props.userName;\r\n\r\n        e.target.checked ?\r\n            axios.get(urlActivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages activated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't activate online sending messages \", alerttype: \"error\" })\r\n                })\r\n            :\r\n            axios.get(urlDeactivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages deactivated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't deactivate online sending messages \", alerttype: \"error\" })\r\n                })\r\n\r\n    }\r\n    doGetSendReceived = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/getsendreceived?peer=' + this.props.userName + '&storage=' + this.props.appSelectedName + '&value=';\r\n        console.log(url);\r\n        let state;\r\n        axios.get(url).then(res => {\r\n            state = res;\r\n            console.log(\"State:\" + state)\r\n\r\n        })\r\n        return state;\r\n    }\r\n\r\n\r\n    doSetSendReceived = (e) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/setsendreceived?peer=' + this.props.userName + '&storage=' + this.props.appSelectedName + '&value=' + e.target.checked;\r\n        axios.get(url)\r\n            .then(res => {\r\n                res.data === true ?\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Status for send received succesfully set\", alerttype: \"success\" })\r\n                    :\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't set status for send received \", alerttype: \"error\" })\r\n            });\r\n        console.log(url);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { showHostInfo,\r\n            showClientInfo,\r\n            showConnectToHost,\r\n            openConnectToHost,\r\n            activateConnectToHost,\r\n            showAddConnection,\r\n            openAddConnection,\r\n            activateAddConnection,\r\n            alertmsg, alertopen, alerttype,\r\n            openedConnection,\r\n            connectionAttempt } = this.state;\r\n\r\n        function isInt(value) {\r\n            return !isNaN(value) &&\r\n                parseInt(Number(value)) == value &&\r\n                !isNaN(parseInt(value, 10));\r\n        }\r\n\r\n        const validate = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n\r\n                this.setState({ activateAddConnection: true, newPort: e.target.value })\r\n            } else {\r\n                this.setState({ activateAddConnection: false })\r\n            }\r\n        }\r\n\r\n        const validateHostName = (e) => {\r\n            this.setState({ hostNameToConnect: e.target.value }, () => validateConnectToHost())\r\n        }\r\n\r\n        const validateHostSocket = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n                this.setState({ hostSocketToConnect: e.target.value }, () => validateConnectToHost())\r\n            } else {\r\n                this.setState({ hostSocketToConnect: '' }, () => validateConnectToHost())\r\n            }\r\n        }\r\n\r\n        const validateConnectToHost = () => {\r\n            if (this.state.hostNameToConnect.length > 0 && this.state.hostSocketToConnect.length > 0) {\r\n                this.setState({ activateConnectToHost: true })\r\n            } else {\r\n                this.setState({ activateConnectToHost: false })\r\n            }\r\n\r\n        }\r\n\r\n        const showAdd = () => {\r\n            this.setState({ openAddConnection: !openAddConnection })\r\n        }\r\n        const showConnect = () => {\r\n            this.setState({ openConnectToHost: !openConnectToHost })\r\n\r\n        }\r\n\r\n\r\n        const handleClose = (event, reason) => {\r\n            this.setState({ alertopen: !this.state.alertopen });\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"connection-menu\">\r\n                <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={1000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity={alerttype}>\r\n                        {alertmsg}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n\r\n                {connectionAttempt.length > 0 ?\r\n\r\n                    connectionAttempt.map((item, index) => {\r\n                        return (\r\n                            item.initialized === false ?\r\n\r\n                                <div className=\"hosted-server\">\r\n                                    Attempting to connect to {item.ip}:{item.port} ...\r\n                                <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                                :\r\n                                <div className=\"hosted-server\">\r\n                                    Connection to {item.ip}:{item.port} established\r\n                            <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                        )\r\n                    })\r\n\r\n                    :\r\n                    null\r\n                }\r\n\r\n                {showHostInfo ?\r\n                    <div className=\"hosted-server\">\r\n                        <PublicIcon id=\"icon\" />  You are now hosting:<br /> {openedConnection.ip} | Port {openedConnection.port}\r\n                        <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateServer} />\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n\r\n\r\n\r\n                <div className=\"connection\">\r\n                    <p id=\"title\">   <GroupIcon id=\"icon\" /> Available connections</p>\r\n                    <p className=\"connection-information\">  No available connections</p>\r\n                    <CachedIcon id=\"refresh-icon\" />\r\n                </div>\r\n                <div className=\"setting\">\r\n\r\n                    {showConnectToHost ?\r\n                        <p className=\"connection-setting\">\r\n                            Connect to a remote server\r\n                            {\r\n                                openConnectToHost ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showConnect} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showConnect} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n                    {\r\n                        openConnectToHost ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"IP/DNS-Name\" onChange={validateHostName} />\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"Port \" onChange={validateHostSocket} />\r\n\r\n                                {\r\n                                    activateConnectToHost ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doConnectToHost} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n\r\n                    {showAddConnection ?\r\n                        <p className=\"connection-setting\">\r\n                            Open a server\r\n                      {\r\n                                openAddConnection ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showAdd} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showAdd} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n\r\n\r\n\r\n                    {\r\n                        openAddConnection ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"addConnection\" name=\"connectionID\" className=\"input\" placeholder=\"Enter server socket, e.g. 7070 \" onChange={validate} />\r\n\r\n                                {\r\n                                    activateAddConnection ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doOpenConnection} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n                    <p className=\"toggle-setting\">\r\n                        <label class=\"switch\">\r\n                            <input type=\"checkbox\" onChange={this.doSetOnlineMess} />\r\n                            <span class=\"slider round\"></span>\r\n                        </label> Set messages online sending\r\n\r\n                    </p>\r\n                    {\r\n                        this.props.appSelected ?\r\n                            <SendReceived setSendReceived={this.doSetSendReceived} userName={this.props.userName} appSelectedName={this.props.appSelectedName} />\r\n                            :\r\n                            null\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Connection","C:\\Users\\xuanb\\Desktop\\BA\\ASAP-Gui-Frontend\\src\\components\\fragments\\SendReceived.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\index.js",[],["140","141"],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\App.js",["142"],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\reportWebVitals.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\Footer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\Login.js",["143"],"import React, { Component } from 'react';\r\nimport Peer from './subcomponents/Peer';\r\nimport CreateUser from './subcomponents/CreateUser';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Terminal from '../fragments/Terminal';\r\nimport { animateScroll } from \"react-scroll\";\r\n\r\n\r\nimport '../../css/loginscreen/Login.css';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nclass Login extends React.Component {\r\n    state = {\r\n        peers: [],\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:8080/api/v1/asap/peers')\r\n            .then(res => this.setState({ peers: res.data }))\r\n    }\r\n\r\n\r\n    //create User\r\n    addUser = (userName) => {\r\n        let url = 'http://localhost:8080/api/v1/asap/peer?name=' + userName;\r\n        axios.post(url)\r\n            .then(res => this.setState({ peers: [...this.state.peers, res.data] }, () => {\r\n                animateScroll.scrollToBottom({\r\n                    containerId: \"scroll-peers\"\r\n                })\r\n            })\r\n            )\r\n    }\r\n\r\n    //remove all users\r\n    removeAllUser = () => {\r\n        axios.delete('http://localhost:8080/api/v1/asap/peers')\r\n            .then(res => {\r\n                if (res.data === false) {\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't delete peers\", alerttype: \"error\" });\r\n\r\n                } else if (res.data === true) {\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Deleted successfully \", alerttype: \"success\" });\r\n                    axios.get('http://localhost:8080/api/v1/asap/peers')\r\n                        .then(res => this.setState({ peers: res.data }))\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            )\r\n\r\n\r\n\r\n    }\r\n\r\n    handleClose = (event, reason) => {\r\n        this.setState({ alertopen: !this.state.alertopen });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { alertopen, alertmsg, alerttype } = this.state;\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"background-container\">\r\n                    <div className=\"content\">\r\n                        <div className=\"login-container\">\r\n                            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={2000} onClose={this.handleClose}>\r\n                                <Alert onClose={this.handleClose} severity={alerttype}>\r\n                                    {alertmsg}\r\n                                </Alert>\r\n                            </Snackbar>\r\n                            <h1>Please choose a peer</h1>\r\n                            <Peer peers={this.state.peers} />\r\n\r\n                            <div id=\"remove-peer\">\r\n                                <CloseIcon id=\"remove\" onClick={this.removeAllUser} /> Remove all peers\r\n            </div>\r\n                            <CreateUser addUser={this.addUser} />\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"console-login\">\r\n                    <Terminal />\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Login;","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\Main.js",["144","145"],"import React, { Fragment, Component } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { Link } from 'react-router-dom';\r\nimport SockJsClient from 'react-stomp';\r\n\r\n\r\n\r\n\r\nimport Apps from './subcomponents/Apps';\r\nimport axios from 'axios';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { withSnackbar } from 'notistack';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Terminal from '../fragments/Terminal';\r\nimport Messages from './subcomponents/Messages';\r\nimport Connection from './subcomponents/Connection';\r\n//import css-File\r\nimport '../../css/mainscreen/Main.css';\r\n\r\n\r\n\r\n\r\n\r\nclass Main extends Component {\r\n\r\n\r\n    state = {\r\n        username: this.props.location.state ? this.props.location.state.peer : \"\",\r\n        apps: [],\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n        channelSelected: false,\r\n        appSelected: false,\r\n        appSelectedName: '',\r\n        channelUriSelected: '',\r\n\r\n        notify: [\r\n            { format: \"app\", sender: \"Bob\", uni: \"sn1://abChat\", era: 0, isNew: true },\r\n            { format: \"play\", sender: \"Alice\", uni: \"sn1://abChat\", era: 2, isNew: true },\r\n            { format: \"test\", sender: \"John\", uni: \"sn1://abChat\", era: 3, isNew: true },\r\n\r\n        ],\r\n        notifymsg: ''\r\n    }\r\n\r\n    doCreateApp = (newApp) => {\r\n        let url = 'http://localhost:8080/api/v1/asap/app?peer=' + this.state.username + '&app=' + newApp;\r\n        console.log(url)\r\n        axios.post(url)\r\n            .then(res => {\r\n                res.data === null ?\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong: Couldn't create the app workspace\", alerttype: \"error\" })\r\n                    :\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"App created successfully \", alerttype: \"success\", apps: [...this.state.apps, res.data] })\r\n            })\r\n    }\r\n\r\n    showMainScreen = (appName, channel, channelSelected) => {\r\n        this.setState({ channelSelected: channelSelected, appSelectedName: appName, channelUriSelected: channel.uri })\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        axios.get('http://localhost:8080/api/v1/asap/storages?peer=' + this.state.username)\r\n            .then(res => this.setState({ apps: res.data }))\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    handleClose = (event, reason) => {\r\n        this.setState({ alertopen: !this.state.alertopen });\r\n    }\r\n\r\n    handleCloseNotify = (event, reason) => {\r\n        this.setState({ notifyopen: !this.state.notifyopen });\r\n    };\r\n\r\n\r\n    render() {\r\n        const { username, alertmsg, alertopen, alerttype, channelSelected, appSelected, notifyopen, notifymsg } = this.state;\r\n\r\n\r\n        const toggleMainScreen = (appSelected, appName) => {\r\n            this.setState({ appSelected: appSelected, channelSelected: false, appSelectedName: appName });\r\n        }\r\n\r\n        if (username === undefined || username === \"\") {\r\n            return <Redirect to=\"/login\" />;\r\n        } else {\r\n            return (\r\n\r\n                <div class=\"main\">\r\n                    <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={2000} onClose={this.handleClose}>\r\n                        <Alert onClose={this.handleClose} severity={alerttype}>\r\n                            {alertmsg}\r\n                        </Alert>\r\n                    </Snackbar>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    <div id=\"bar\"></div>\r\n                    <div class=\"main-content\">\r\n                        <section class=\"navigation\">\r\n                            <div class=\"user-info\">\r\n                                <AccountCircleIcon id=\"accountIcon\" />\r\n                           Welcome  <b> {this.state.username}</b>\r\n                                <Link to=\"/login\" className=\"exit\">     <ExitToAppIcon id=\"exit-icon\" className=\"icon\" /> </Link>\r\n                            </div>\r\n\r\n                            <div className=\"main-items\">\r\n\r\n                                <Apps apps={this.state.apps} doCreateApp={this.doCreateApp} username={username} showMainScreen={this.showMainScreen} toggleMainScreen={toggleMainScreen} />\r\n\r\n\r\n\r\n\r\n                            </div>\r\n                        </section>\r\n                        <section class=\"main-screen\">\r\n                            {\r\n                                channelSelected && appSelected ?\r\n\r\n                                    <Messages userName={this.state.username} channelUriSelected={this.state.channelUriSelected} appSelected={this.state.appSelectedName} />\r\n                                    :\r\n                                    null\r\n\r\n                            }\r\n\r\n                        </section>\r\n\r\n                        <section class=\"connection-bar\">\r\n\r\n                            <Connection appSelected={this.state.appSelected} userName={this.state.username} appSelectedName={this.state.appSelectedName} />\r\n\r\n\r\n                        </section>\r\n                        <SockJsClient url='http://localhost:8080/websocket/'\r\n                            topics={['/received/user']}\r\n\r\n                            onConnect={() => {\r\n                                console.log(\"connected to websocket\")\r\n                            }}\r\n\r\n                            onDisconnect={() => {\r\n                                console.log(\"disconnected to websocket\")\r\n                            }}\r\n\r\n                            onMessage={(msg) => {\r\n                                console.log(msg);\r\n                                let message = \"Received new chunk from: \" + msg.sender + \" at : \" + msg.format + \" | channel: \" + msg.uri + \" | era: \" + msg.era\r\n                                const action = key => (\r\n                                    <Fragment>\r\n                                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => { this.props.closeSnackbar(key) }}>\r\n                                            <CloseIcon fontSize=\"small\" />\r\n                                        </IconButton>\r\n                                    </Fragment>\r\n                                );\r\n                                this.props.enqueueSnackbar(message, {\r\n                                    anchorOrigin: {\r\n                                        vertical: 'top',\r\n                                        horizontal: 'center',\r\n                                    },\r\n                                    persist: true,\r\n                                    action\r\n                                });\r\n                            }}\r\n                            ref={(client) => { this.clientRef = client }} />\r\n\r\n                    </div>\r\n                    <div className=\"console-main\">\r\n                        <Terminal />\r\n                    </div>\r\n                </div>\r\n\r\n            );\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default withSnackbar(Main);","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\Terminal.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\Peer.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Apps.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\loginscreen\\subcomponents\\CreateUser.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Messages.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Connection.js",["146","147","148","149","150","151"],"import React, { Component } from 'react';\r\n//import css-File\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport '../../../css/mainscreen/Connection.css';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport axios from 'axios';\r\n\r\nimport SendReceived from '../../fragments/SendReceived';\r\n\r\nclass Connection extends Component {\r\n    state = {\r\n        showConnectToHost: true,\r\n        openConnectToHost: false,\r\n        activateConnectToHost: false,\r\n\r\n        showAddConnection: true,\r\n        openAddConnection: false,\r\n        activateAddConnection: false,\r\n\r\n        newPort: '',\r\n        hostNameToConnect: '',\r\n        hostSocketToConnect: '',\r\n        alertopen: false,\r\n        alertmsg: '',\r\n        alerttype: '',\r\n\r\n        showHostInfo: false,\r\n        showClientInfo: false,\r\n        openedConnection: {},\r\n\r\n        connectionAttempt: []\r\n\r\n\r\n    }\r\n\r\n\r\n    doConnectToHost = async () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/connect?host=' + this.state.hostNameToConnect + '&port=' + this.state.hostSocketToConnect + '&peer=' + this.props.userName;\r\n        //   console.log(url);\r\n        let obj = {};\r\n        obj.ip = this.state.hostNameToConnect;\r\n        obj.port = this.state.hostSocketToConnect;\r\n        obj.initialized = false;\r\n        this.setState({ connectionAttempt: [...this.state.connectionAttempt, obj], showClientInfo: true, openConnectToHost: false })\r\n\r\n\r\n        try {\r\n\r\n            const response = await axios.post(url);\r\n            // console.log(typeof response.data);\r\n\r\n            //TODO check another type of response ?\r\n            if (typeof response.data === \"object\") {\r\n                //clone array\r\n                let array = this.state.connectionAttempt;\r\n                array.forEach((element, index) => {\r\n                    if (element.ip == response.data.ip && element.port == response.data.port) {\r\n                        array[index] = response.data\r\n                    }\r\n\r\n                });\r\n                console.log(array)\r\n\r\n                //reset the state\r\n                this.setState({ connectionAttempt: array });\r\n\r\n            }\r\n\r\n        }\r\n        catch (err) {\r\n            this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Error: \" + err, alerttype: \"error\" })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    doTerminateConnection = (host, port) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminateconnection?host=' + host + '&port=' + port;\r\n        console.log(\"cancel connection to: \" + host + \":\" + port);\r\n        axios.post(url).then(res => {\r\n\r\n            if (res.data === true) {\r\n                let array = this.state.connectionAttempt;\r\n\r\n                for (var i = array.length - 1; i >= 0; --i) {\r\n\r\n                    if (array[i].ip == host && array[i].port == port) {\r\n                        array.splice(i, 1);\r\n                    }\r\n                }\r\n                this.setState({ connectionAttempt: array, alertopen: !this.state.alertopen, alertmsg: \"Connection successfully canceled\", alerttype: \"success\" });\r\n\r\n            } else {\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't cancel connection attempt\", alerttype: \"error\" })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    doOpenConnection = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/openconnection?port=' + this.state.newPort + '&peer=' + this.props.userName;\r\n        axios.post(url).then(res => {\r\n\r\n            res.data !== \"\" ?\r\n                this.setState({ openedConnection: res.data, showHostInfo: true, openAddConnection: !this.state.openAddConnection, showAddConnection: !this.state.showAddConnection })\r\n\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't open connection\", alerttype: \"error\" })\r\n        });\r\n    }\r\n    doTerminateServer = (e) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/terminate?port=' + this.state.newPort;\r\n\r\n        axios.post(url).then(res => {\r\n            res.data === true ?\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Host succesfully cancelled\", alerttype: \"success\", showHostInfo: false, showAddConnection: !this.state.showAddConnection })\r\n                :\r\n                this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Something went wrong, couldn't cancel host\", alerttype: \"error\" })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    doSetOnlineMess = (e) => {\r\n        const urlActivate = 'http://localhost:8080/api/v1/asap/activatemess?peer=' + this.props.userName;\r\n        const urlDeactivate = 'http://localhost:8080/api/v1/asap/deactivatemess?peer=' + this.props.userName;\r\n\r\n        e.target.checked ?\r\n            axios.get(urlActivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages activated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't activate online sending messages \", alerttype: \"error\" })\r\n                })\r\n            :\r\n            axios.get(urlDeactivate)\r\n                .then(res => {\r\n                    res.data === true ?\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Online sending messages deactivated\", alerttype: \"success\" })\r\n                        :\r\n                        this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't deactivate online sending messages \", alerttype: \"error\" })\r\n                })\r\n\r\n    }\r\n    doGetSendReceived = () => {\r\n        const url = 'http://localhost:8080/api/v1/asap/getsendreceived?peer=' + this.props.userName + '&storage=' + this.props.appSelectedName + '&value=';\r\n        console.log(url);\r\n        let state;\r\n        axios.get(url).then(res => {\r\n            state = res;\r\n            console.log(\"State:\" + state)\r\n\r\n        })\r\n        return state;\r\n    }\r\n\r\n\r\n    doSetSendReceived = (e) => {\r\n        const url = 'http://localhost:8080/api/v1/asap/setsendreceived?peer=' + this.props.userName + '&storage=' + this.props.appSelectedName + '&value=' + e.target.checked;\r\n        axios.get(url)\r\n            .then(res => {\r\n                res.data === true ?\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Status for send received succesfully set\", alerttype: \"success\" })\r\n                    :\r\n                    this.setState({ alertopen: !this.state.alertopen, alertmsg: \"Couldn't set status for send received \", alerttype: \"error\" })\r\n            });\r\n        console.log(url);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { showHostInfo,\r\n            showClientInfo,\r\n            showConnectToHost,\r\n            openConnectToHost,\r\n            activateConnectToHost,\r\n            showAddConnection,\r\n            openAddConnection,\r\n            activateAddConnection,\r\n            alertmsg, alertopen, alerttype,\r\n            openedConnection,\r\n            connectionAttempt } = this.state;\r\n\r\n        function isInt(value) {\r\n            return !isNaN(value) &&\r\n                parseInt(Number(value)) == value &&\r\n                !isNaN(parseInt(value, 10));\r\n        }\r\n\r\n        const validate = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n\r\n                this.setState({ activateAddConnection: true, newPort: e.target.value })\r\n            } else {\r\n                this.setState({ activateAddConnection: false })\r\n            }\r\n        }\r\n\r\n        const validateHostName = (e) => {\r\n            this.setState({ hostNameToConnect: e.target.value }, () => validateConnectToHost())\r\n        }\r\n\r\n        const validateHostSocket = (e) => {\r\n            if (e.target.value.length === 4 && isInt(e.target.value) && (e.target.value.search(/\\./) < 0)) {\r\n                this.setState({ hostSocketToConnect: e.target.value }, () => validateConnectToHost())\r\n            } else {\r\n                this.setState({ hostSocketToConnect: '' }, () => validateConnectToHost())\r\n            }\r\n        }\r\n\r\n        const validateConnectToHost = () => {\r\n            if (this.state.hostNameToConnect.length > 0 && this.state.hostSocketToConnect.length > 0) {\r\n                this.setState({ activateConnectToHost: true })\r\n            } else {\r\n                this.setState({ activateConnectToHost: false })\r\n            }\r\n\r\n        }\r\n\r\n        const showAdd = () => {\r\n            this.setState({ openAddConnection: !openAddConnection })\r\n        }\r\n        const showConnect = () => {\r\n            this.setState({ openConnectToHost: !openConnectToHost })\r\n\r\n        }\r\n\r\n\r\n        const handleClose = (event, reason) => {\r\n            this.setState({ alertopen: !this.state.alertopen });\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"connection-menu\">\r\n                <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={alertopen} autoHideDuration={1000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity={alerttype}>\r\n                        {alertmsg}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n\r\n                {connectionAttempt.length > 0 ?\r\n\r\n                    connectionAttempt.map((item, index) => {\r\n                        return (\r\n                            item.initialized === false ?\r\n\r\n                                <div className=\"hosted-server\">\r\n                                    Attempting to connect to {item.ip}:{item.port} ...\r\n                                <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                                :\r\n                                <div className=\"hosted-server\">\r\n                                    Connection to {item.ip}:{item.port} established\r\n                            <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateConnection.bind(this, item.ip, item.port)} />\r\n                                </div>\r\n                        )\r\n                    })\r\n\r\n                    :\r\n                    null\r\n                }\r\n\r\n                {showHostInfo ?\r\n                    <div className=\"hosted-server\">\r\n                        <PublicIcon id=\"icon\" />  You are now hosting:<br /> {openedConnection.ip} | Port {openedConnection.port}\r\n                        <CloseIcon id=\"close-icon\" className=\"icon\" onClick={this.doTerminateServer} />\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n\r\n\r\n\r\n                <div className=\"connection\">\r\n                    <p id=\"title\">   <GroupIcon id=\"icon\" /> Available connections</p>\r\n                    <p className=\"connection-information\">  No available connections</p>\r\n                    <CachedIcon id=\"refresh-icon\" />\r\n                </div>\r\n                <div className=\"setting\">\r\n\r\n                    {showConnectToHost ?\r\n                        <p className=\"connection-setting\">\r\n                            Connect to a remote server\r\n                            {\r\n                                openConnectToHost ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showConnect} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showConnect} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n                    {\r\n                        openConnectToHost ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"IP/DNS-Name\" onChange={validateHostName} />\r\n                                <input autoComplete=\"off\" type=\"text\" className=\"input\" placeholder=\"Port \" onChange={validateHostSocket} />\r\n\r\n                                {\r\n                                    activateConnectToHost ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doConnectToHost} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n\r\n                    {showAddConnection ?\r\n                        <p className=\"connection-setting\">\r\n                            Open a server\r\n                      {\r\n                                openAddConnection ?\r\n                                    <RemoveIcon id=\"removeIcon\" className=\"icon\" onClick={showAdd} />\r\n                                    :\r\n                                    <AddIcon id=\"addIcon\" className=\"icon\" onClick={showAdd} />\r\n\r\n                            }\r\n\r\n\r\n                        </p>\r\n\r\n                        :\r\n                        null\r\n                    }\r\n\r\n\r\n\r\n                    {\r\n                        openAddConnection ?\r\n                            <div className=\"add\">\r\n                                <input autoComplete=\"off\" type=\"text\" id=\"addConnection\" name=\"connectionID\" className=\"input\" placeholder=\"Enter server socket, e.g. 7070 \" onChange={validate} />\r\n\r\n                                {\r\n                                    activateAddConnection ?\r\n                                        <CheckIcon id=\"checkicon-activate\" className=\"icon\" onClick={this.doOpenConnection} />\r\n                                        :\r\n\r\n                                        <CheckIcon id=\"checkicon-inactive\" />\r\n\r\n                                }\r\n\r\n\r\n\r\n                            </div>\r\n                            : null\r\n                    }\r\n                    <p className=\"toggle-setting\">\r\n                        <label class=\"switch\">\r\n                            <input type=\"checkbox\" onChange={this.doSetOnlineMess} />\r\n                            <span class=\"slider round\"></span>\r\n                        </label> Set messages online sending\r\n\r\n                    </p>\r\n                    {\r\n                        this.props.appSelected ?\r\n                            <SendReceived setSendReceived={this.doSetSendReceived} userName={this.props.userName} appSelectedName={this.props.appSelectedName} />\r\n                            :\r\n                            null\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Connection","C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Channels.js",["152"],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\fragments\\SendReceived.js",[],"C:\\Users\\xuanb\\Desktop\\BA\\rework_1\\ASAP-Gui-Frontend\\src\\components\\mainscreen\\subcomponents\\Era.js",[],{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":11,"column":42,"nodeType":"159","messageId":"160","endLine":11,"endColumn":50},{"ruleId":"157","severity":1,"message":"161","line":1,"column":17,"nodeType":"159","messageId":"160","endLine":1,"endColumn":26},{"ruleId":"157","severity":1,"message":"162","line":91,"column":89,"nodeType":"159","messageId":"160","endLine":91,"endColumn":99},{"ruleId":"157","severity":1,"message":"163","line":91,"column":101,"nodeType":"159","messageId":"160","endLine":91,"endColumn":110},{"ruleId":"164","severity":1,"message":"165","line":41,"column":9,"nodeType":"166","messageId":"167","endLine":41,"endColumn":23},{"ruleId":"168","severity":1,"message":"169","line":64,"column":36,"nodeType":"170","messageId":"167","endLine":64,"endColumn":38},{"ruleId":"168","severity":1,"message":"169","line":64,"column":72,"nodeType":"170","messageId":"167","endLine":64,"endColumn":74},{"ruleId":"168","severity":1,"message":"169","line":97,"column":37,"nodeType":"170","messageId":"167","endLine":97,"endColumn":39},{"ruleId":"168","severity":1,"message":"169","line":97,"column":62,"nodeType":"170","messageId":"167","endLine":97,"endColumn":64},{"ruleId":"157","severity":1,"message":"171","line":185,"column":13,"nodeType":"159","messageId":"160","endLine":185,"endColumn":27},{"ruleId":"168","severity":1,"message":"169","line":198,"column":41,"nodeType":"170","messageId":"167","endLine":198,"endColumn":43},{"ruleId":"153","replacedBy":"172"},{"ruleId":"155","replacedBy":"173"},{"ruleId":"157","severity":1,"message":"158","line":11,"column":42,"nodeType":"159","messageId":"160","endLine":11,"endColumn":50},{"ruleId":"157","severity":1,"message":"161","line":1,"column":17,"nodeType":"159","messageId":"160","endLine":1,"endColumn":26},{"ruleId":"157","severity":1,"message":"162","line":91,"column":89,"nodeType":"159","messageId":"160","endLine":91,"endColumn":99},{"ruleId":"157","severity":1,"message":"163","line":91,"column":101,"nodeType":"159","messageId":"160","endLine":91,"endColumn":110},{"ruleId":"168","severity":1,"message":"169","line":64,"column":36,"nodeType":"170","messageId":"167","endLine":64,"endColumn":38},{"ruleId":"168","severity":1,"message":"169","line":64,"column":72,"nodeType":"170","messageId":"167","endLine":64,"endColumn":74},{"ruleId":"168","severity":1,"message":"169","line":97,"column":37,"nodeType":"170","messageId":"167","endLine":97,"endColumn":39},{"ruleId":"168","severity":1,"message":"169","line":97,"column":62,"nodeType":"170","messageId":"167","endLine":97,"endColumn":64},{"ruleId":"157","severity":1,"message":"171","line":185,"column":13,"nodeType":"159","messageId":"160","endLine":185,"endColumn":27},{"ruleId":"168","severity":1,"message":"169","line":198,"column":41,"nodeType":"170","messageId":"167","endLine":198,"endColumn":43},{"ruleId":"164","severity":1,"message":"165","line":45,"column":9,"nodeType":"166","messageId":"167","endLine":45,"endColumn":23},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'notifyopen' is assigned a value but never used.","'notifymsg' is assigned a value but never used.","no-dupe-keys","Duplicate key 'openAddChannel'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'showClientInfo' is assigned a value but never used.",["174"],["175"],"no-global-assign","no-unsafe-negation"]